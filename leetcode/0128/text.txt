private:
  vector<int>& qsort(vector<int>& nums){ //ascending order
    printf("qsorting "); showVect<int>(nums); printf("\n");
    if(nums.size() <= 1){
      return nums;
    }
    int stationary = 0;
    int mobile     = nums.size() - 1;
    int direction  = -1; 
    while(stationary != mobile){
      if(nums[stationary] * direction < nums[mobile] * direction){ //out of order
        //swap
        nums[stationary] += nums[mobile];
        nums[mobile]      = nums[stationary] - nums[mobile];
        nums[stationary] -= nums[mobile];
        stationary += mobile;
        mobile      = stationary - mobile;
        stationary -= mobile; 
        direction  *= -1;
      }
      mobile += direction; 
    }
    if(stationary == 0) { return nums; } //no swaps 
    auto begin = nums.begin();
    auto pivot = begin + mobile;
    auto end   = nums.end();
    vector<int> left(begin, pivot);
    vector<int> right(pivot, end);
    left = qsort(left); 
    right = qsort(right);
    nums.clear();
    nums.reserve(left.size() + right.size());
    nums.insert( nums.end(), left.begin(), left.end() );
    nums.insert( nums.end(), right.begin(), right.end() );
    return nums;
  }
};